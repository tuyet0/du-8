{"version":3,"file":"static/js/276.a4257483.chunk.js","mappings":"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","sources":["../node_modules/@firebase/storage/src/implementation/error.ts","../node_modules/@firebase/storage/src/implementation/constants.ts","../node_modules/@firebase/storage/src/implementation/location.ts","../node_modules/@firebase/storage/src/implementation/connection.ts","../node_modules/@firebase/storage/src/implementation/failrequest.ts","../node_modules/@firebase/storage/src/implementation/type.ts","../node_modules/@firebase/storage/src/implementation/url.ts","../node_modules/@firebase/storage/src/implementation/utils.ts","../node_modules/@firebase/storage/src/implementation/request.ts","../node_modules/@firebase/storage/src/implementation/backoff.ts","../node_modules/@firebase/storage/src/implementation/fs.ts","../node_modules/@firebase/storage/src/platform/browser/base64.ts","../node_modules/@firebase/storage/src/implementation/string.ts","../node_modules/@firebase/storage/src/implementation/blob.ts","../node_modules/@firebase/storage/src/implementation/json.ts","../node_modules/@firebase/storage/src/implementation/path.ts","../node_modules/@firebase/storage/src/implementation/metadata.ts","../node_modules/@firebase/storage/src/implementation/requestinfo.ts","../node_modules/@firebase/storage/src/implementation/requests.ts","../node_modules/@firebase/storage/src/implementation/taskenums.ts","../node_modules/@firebase/storage/src/implementation/observer.ts","../node_modules/@firebase/storage/src/implementation/async.ts","../node_modules/@firebase/storage/src/platform/browser/connection.ts","../node_modules/@firebase/storage/src/task.ts","../node_modules/@firebase/storage/src/reference.ts","../node_modules/@firebase/storage/src/service.ts","../node_modules/@firebase/storage/src/constants.ts","../node_modules/@firebase/storage/src/api.ts","../node_modules/@firebase/storage/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNode } from '@firebase/util';\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError,\n  retryLimitExceeded\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\nimport { isRetryStatusCode } from './implementation/utils';\nimport { CompleteFn } from '@firebase/util';\nimport { DEFAULT_MIN_SLEEP_TIME_MILLIS } from './implementation/constants';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private pendingTimeout?: ReturnType<typeof setTimeout>;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  private sleepTime: number;\n\n  private maxSleepTime: number;\n\n  isExponentialBackoffExpired(): boolean {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(\n              this.sleepTime * 2,\n              DEFAULT_MIN_SLEEP_TIME_MILLIS\n            );\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e as StorageError;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken,\n        /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"],"names":["StorageErrorCode","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","StorageError","_FirebaseError","_inherits","_super","_createSuper","code","message","_this","status_","arguments","length","undefined","_classCallCheck","call","prependCode","concat","customData","serverResponse","_baseMessage","Object","setPrototypeOf","_assertThisInitialized","prototype","_createClass","key","get","this","set","status","value","FirebaseError","unknown","UNKNOWN","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","cannotSliceBlob","CANNOT_SLICE_BLOB","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","ErrorCode","Location","bucket","path","path_","encode","encodeURIComponent","bucketString","host","bucketLocation","makeFromUrl","e","INVALID_DEFAULT_BUCKET","url","location","bucketDomain","gsRegex","RegExp","httpModify","loc","decodeURIComponent","firebaseStorageHost","replace","groups","regex","indices","postModify","charAt","slice","i","group","captures","exec","bucketValue","pathValue","INVALID_URL","invalidUrl","FailRequest","error","promise_","Promise","reject","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","isNode","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","hasOwnProperty","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","_this2","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","_this3","backoffDone","requestWentThrough","connection","wasSuccessCode","result","getResponse","err","getErrorText","RequestEndStatus","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","_len","args","Array","_key","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","_len2","_key2","waitMillis","Math","random","stopped","stop","wasTimeout","start","backoffCallback","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","appDelete","abort","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob$1","_len3","_key3","bb","append","getBlob","UNSUPPORTED_ENVIRONMENT","decodeBase64","encoded","atob","polyFill","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","base64","rest","decoded","percentEncodedBytes_","dataURLBytes_","b","c","charCodeAt","push","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","bytes","includes","array","dataURL","matches","match","middle","s","end","substring","endsWith","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","size_","type_","startByte","endByte","sliced","blob","webkitSlice","mozSlice","sliceBlob","buffer","_len4","_key4","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","jsonObjectOrNull","obj","JSON","parse","isArray","lastComponent","lastIndexOf","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","xformPath","sizeMapping","Number","fromResource","service","resource","len","mapping","defineProperty","_makeStorageReference","addRef","fromResourceString","resourceString","toResourceString","stringify","RequestInfo","method","handler","urlParams","headers","body","errorHandler","progressCallback","successCodes","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","tokens","split","token","alt","downloadUrlFromResourceString","_protocol","sharedErrorHandler","newErr","UNAUTHORIZED_APP","UNAUTHENTICATED","QUOTA_EXCEEDED","UNAUTHORIZED","objectErrorHandler","shared","OBJECT_NOT_FOUND","getMetadata$2","fullServerUrl","maxOperationRetryTime","requestInfo","metadataForUpload_","metadataClone","assign","determineContentType_","multipartUpload","bucketOnlyServerUrl","boundary","str","toString","genBoundary","metadata_","preBlobPart","postBlobPart","name","maxUploadRetryTime","uploadData","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","SERVER_FILE_WRONG_SIZE","bytesLeft","bytesToUpload","min","uploadStatus","newCurrent","TaskState","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","next","observer","async","f","_len5","argsToForward","_key5","textFactoryOverride","XhrConnection","_this4","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","_XhrConnection","_super2","responseType","newTextConnection","UploadTask","ref","_this5","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_codeEquals","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","_this6","sizeBefore","_updateProgress","_this7","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","callback","_this8","all","_getAuthToken","_getAppCheckToken","_ref2","_slicedToArray","authToken","appCheckToken","_this9","_resolveToken","metadataForUpload","createResumableUpload","_location","createRequest","_makeRequest","getPromise","_this10","sizeString","isNaN","getResumableUploadStatus","statusRequest","_this11","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","_this12","metadataRequest","_this13","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","_this14","_addObserver","_removeObserver","onFulfilled","onRejected","_notifyObserver","splice","_this15","_finishPromise","triggered","bind","snapshot","valid","Reference","_service","_newRef","newPath","parent","INVALID_ROOT_OPERATION","invalidRootOperation","getDownloadURL$1","_throwIfRoot","getDownloadUrl","makeRequestWithTokens","NO_DOWNLOAD_URL","deleteObject$1","_xhr","_text","deleteObject$2","_getChild$1","childPath","canonicalChildPath","filter","component","join","child","refFromPath","FirebaseStorageImpl","_bucket","NO_DEFAULT_BUCKET","reference","ref$1","serviceOrRef","pathOrUrl","test","extractBucket","config","makeFromBucketSpec","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","options","time","POSITIVE_INFINITY","_getAuthToken2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","auth","tokenData","wrap","_context","prev","_overrideAuthToken","abrupt","getImmediate","optional","getToken","sent","accessToken","_getAppCheckToken2","_callee2","appCheck","_context2","request","clear","requestFactory","_this16","appId","firebaseVersion","addGmpidHeader_","addAuthHeader_","addVersionHeader_","addAppCheckHeader_","makeRequest","add","delete","_makeRequestWithTokens","_callee3","_yield$Promise$all","_yield$Promise$all2","_context3","_x4","_x5","STORAGE_TYPE","uploadBytesResumable","uploadBytesResumable$1","getModularInstance","getDownloadURL","deleteObject","getStorage","getApp","bucketUrl","storageInstance","_getProvider","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectStorageEmulator","_toConsumableArray","port","mockUserToken","createMockUserToken","projectId","connectStorageEmulator$1","factory","container","_ref3","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","_registerComponent","Component","setMultipleInstances","registerVersion","version"],"sourceRoot":""}